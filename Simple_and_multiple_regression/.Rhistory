fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T) +
geom_point(data = scatter_data,
mapping = aes(floor_size,
flat_price)) +
model_data %>%
ggplot(aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T) +
geom_point(data = scatter_data,
mapping = aes(floor_size,
flat_price))
model_data <- margins(reg_price_size_year,
at = list(
year_built = seq(1920, 2010, 30),
floor_size = seq(0, 200, 50)
)
)
scatter_data <- reg_price_size_year[["model"]] %>%
mutate(year_built = as.factor(case_when(year_built <= 1920 ~ 1920,
year_built <= 1950 ~ 1950,
year_built <= 1980 ~ 1980,
year_built > 1980 ~ 1980)
)
)
model_data %>%
ggplot(aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T) +
geom_point(data = scatter_data,
mapping = aes(floor_size,
flat_price))
model_data %>%
ggplot(aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T)
model_data <- margins(reg_price_size_year,
at = list(
year_built = seq(1920, 2010, 30),
floor_size = seq(0, 200, 50)
)
) %>%
mutate(floor_size = as.factor(floor_size))
scatter_data <- reg_price_size_year[["model"]] %>%
mutate(year_built = as.factor(case_when(year_built <= 1920 ~ 1920,
year_built <= 1950 ~ 1950,
year_built <= 1980 ~ 1980,
year_built > 1980 ~ 1980)
)
)
model_data %>%
ggplot(aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T) +
geom_point(data = scatter_data,
mapping = aes(floor_size,
flat_price))
model_data
model_data <- margins(reg_price_size_year,
at = list(
year_built = seq(1920, 2010, 30),
floor_size = seq(0, 200, 50)
)
)
model_data
View(model_data)
model_data = model_data %>% mutate(floor_size = as.factor(floor_size))
model_data %>%
ggplot(aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T) +
geom_point(data = scatter_data,
mapping = aes(floor_size,
flat_price))
model_data %>%
ggplot(aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T) #+
model_data %>%
ggplot(aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T) #+
model_data %>%
ggplot(mapping = aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", formula = y ~ x, se = F, fullrange = T) #+
model_data %>%
ggplot(mapping = aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", se = F, fullrange = T) #+
model_data %>%
ggplot(mapping = aes(floor_size,
fitted,
colour = year_built)) +
geom_point()
model_data <- margins(reg_price_size_year,
at = list(
year_built = seq(1920, 2010, 30),
floor_size = seq(0, 200, 50)
)
)
model_data = model_data %>% mutate(year_built = as.factor(year_built))
scatter_data <- reg_price_size_year[["model"]] %>%
mutate(year_built = as.factor(case_when(year_built <= 1920 ~ 1920,
year_built <= 1950 ~ 1950,
year_built <= 1980 ~ 1980,
year_built > 1980 ~ 1980)
)
)
model_data %>%
ggplot(mapping = aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", se = F, fullrange = T) #+
geom_point(data = scatter_data,
mapping = aes(floor_size,
flat_price))
model_data <- margins(reg_price_size_year,
at = list(
year_built = seq(1920, 2010, 30),
floor_size = seq(0, 200, 50)
)
)
model_data = model_data %>% mutate(year_built = as.factor(year_built))
scatter_data <- reg_price_size_year[["model"]] %>%
mutate(year_built = as.factor(case_when(year_built <= 1920 ~ 1920,
year_built <= 1950 ~ 1950,
year_built <= 1980 ~ 1980,
year_built > 1980 ~ 1980)
)
)
model_data %>%
ggplot(mapping = aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", se = F, fullrange = T) +
geom_point(data = scatter_data,
mapping = aes(floor_size,
flat_price))
model_data <- margins(reg_price_size_year,
at = list(
year_built = seq(1920, 2010, 30),
floor_size = seq(0, 200, 50)
)
)
model_data = model_data %>% mutate(year_built = as.factor(year_built))
scatter_data <- reg_price_size_year[["model"]] %>%
mutate(year_built = as.factor(case_when(year_built <= 1920 ~ 1920,
year_built <= 1950 ~ 1950,
year_built <= 1980 ~ 1980,
year_built > 1980 ~ 2010)
)
)
model_data %>%
ggplot(mapping = aes(floor_size,
fitted,
colour = year_built)) +
geom_smooth(method = "lm", se = F, fullrange = T) +
geom_point(data = scatter_data,
mapping = aes(floor_size,
flat_price))
reg_price_size_energy_year <- lm(flat_price ~ floor_size + energy_efficiency + year_built, data = df)
margins_regression <- margins(reg_price_size_energy_year,
at = list(floor_size = c(50,
100,
150,
200),
year_built = c(1970,
1990,
2000,
2010),
i.energy_efficiency = c(1:3)))
reg_price_size_energy_year <- lm(flat_price ~ floor_size + energy_efficiency + year_built, data = df)
margins_regression <- margins(reg_price_size_energy_year,
at = list(floor_size = c(50,
100,
150,
200),
year_built = c(1970,
1990,
2000,
2010),
i.energy_efficiency = c(1:3)))
reg_price_size_energy_year <- lm(flat_price ~ floor_size + energy_efficiency + year_built, data = df)
margins_regression <- margins(reg_price_size_energy_year,
at = list(floor_size = c(50,
100,
150,
200),
year_built = c(1970,
1990,
2000,
2010),
energy_efficiency = c(1:3)))
energy_efficiency
df <- df %>%
mutate(i.energy_efficiency = case_when(energy_efficiency == "poor" ~ 1,
energy_efficiency == "mediocre" ~ 2,
energy_efficiency == "best" ~ 3))
# NB we could also use as.integer(energy_efficency), but this would cause the variable to be coded in reverse order (i.e., best = 1, and poor = 3)
reg_price_size_energy_year <- lm(flat_price ~ floor_size + energy_efficiency + year_built, data = df)
margins_regression <- margins(reg_price_size_energy_year,
at = list(floor_size = seq(0,200, 50),
year_built = seq(1920, 2010, 30),
i.energy_efficiency = 1:3)
margins_regression <- mutate(margins_regression,
reg_price_size_energy_year <- lm(flat_price ~ floor_size + energy_efficiency + year_built, data = df)
margins_regression <- margins(reg_price_size_energy_year,
at = list(floor_size = seq(0,200, 50),
year_built = seq(1920, 2010, 30),
i.energy_efficiency = 1:3)
)
margins_regression <- mutate(margins_regression,
year_built = as.factor(year_built)
)
margins_regression <- mutate(margins_regression, # We could not just use it as a factor from the start, since it would change the model
i.energy_efficiency = factor(i.energy_efficiency,
levels = c(1:3),
labels= c("Poor",
"Mediocre",
"Best")))
margins_regression %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = year_built,
linetype = energy_efficiency) ) +
geom_point() +
geom_smooth(method = "lm", se = F)
devtools::install_github("Kss2k/pprint")
#devtools::install_github("Kss2k/pprint")
library(pprint)
devtools::install_github("Kss2k/pprint")
#devtools::install_github("Kss2k/pprint")
library(pprint)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Introduction_to_R")
# Base R:
summary(df)
str(df)
# If you have installed the pprint package
psummary(df)
# Changing working directory
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Simple_and_multiple_regression")
# Reading the dataframe and storing it in an object named df
df <- readRDS("flats.rds")
# Viewing the dataframe
View(df)
# Base R:
summary(df)
str(df)
# If you have installed the pprint package
psummary(df)
help(lm)
attach(df)
detach(df) # I do not want it to be attached going forward
reg_price_size <- lm(formula = flat_price ~ floor_size,
data = df)
summary(reg_price_size)
psummary(reg_price_size)
library(Statamarkdown) # This is only necessary for me
library(ggplot2) # Necessary for plotting data
library(dplyr)
#devtools::install_github("Kss2k/pprint")
library(pprint)
interpretation_reg_price_size <- "1. Firstly we can see that the overall model is significant p < .001 \n
2. This means that there is less than 0.1% likelyhood to get the same results (or stronger) given no effect \n
3. Secondly we can see that the coefficient for floor_size is significant both in terms of p-value and confidence interval \n
4. The coefficient is 5274$, meaning that flat price on average increases with 5274$ per square meter increase in floor size. \n
5. The coefficient is significant p < .001, and CI does not overlap with 0 \n
6. The intercept/constant is 121356 meaning that we predict that a flat with 0 sqm floor size would (on average) cost 121 356 $. \n
7. Lastly we can see that the model (or rather floor_size) explains 60% of the variance in flat_prize"
interpretation_reg_price_size_year <- "1. Firstly we can see that the overall model is significant p < .001 \n
2. This means that there is less than 0.1% likelyhood to get the same results (or stronger) given no effect \n
3. Secondly we can see that the coefficient for floor_size is significant both in terms of p-value and confidence interval \n
4. We can also see that the model explains roughly 60% of the variance, and about 59% if penalized for adding an extra variable. \n
5. Notice that this is basicly the same as our previous model, suggesting that year_built (in our dataset) is not a strong predictor of flat price \n
6. The coefficient for floor_size is 5367 (p < .001), meaning that flat price on average increases with 5367$ per square meter increase in floor size, controlled for the effect of year_built \n
7. The coefficient for year_built is 640 (p = .469), then, it seeems that year built is not associated with flat price. If we were to interpet the coefficent however, we could say that flat price (on average) increases by 640$ per one year increase in buildyear. We could then say that the price decreases (on average) by 640$ per year old it is."
cat(interpretation_reg_price_size)
help("ggplot")
ggplot(data = df, mapping = aes(x = floor_size,
y = flat_price))
ggplot(data = df, mapping = aes(x = floor_size,
y = flat_price)) +
geom_smooth(method = "lm")
ggplot(data = df, mapping = aes(x = floor_size,
y = flat_price)) +
geom_smooth(method = "lm", formula = y ~ x)
ggplot(data = df, mapping = aes(x = floor_size,
y = flat_price)) +
geom_smooth(method = "lm", formula = y ~ x, se = F)
ggplot(data = df, mapping = aes(x = floor_size,
y = flat_price)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_point()
ggplot(data = df, mapping = aes(x = floor_size,
y = flat_price)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_point(colour = "red")
ggplot(data = df, mapping = aes(x = floor_size,
y = flat_price)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_point() +
geom_hline(yintercept = mean(df$flat_price))
ggplot(data = df, mapping = aes(x = floor_size,
y = flat_price)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_point() +
geom_hline(yintercept = mean(df$flat_price), colour = "red")
preg(reg_price_size)
g
psummary(reg_price_size)
reg_price_year <- lm(flat_price ~ year_built, data = df)
reg_price_year <- lm(flat_price ~ year_built, data = df)
summary(reg_price_year)
reg_price_year <- lm(flat_price ~ year_built, data = df)
psummary(reg_price_year)
ggplot(df, mapping = aes(x = year_built,
y = flat_price)) +
geom_smooth(method = "lm", se = F)
devtools::install_github("Kss2k/pprint")
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Simple_and_multiple_regression")
# install.packages("plot3D")
library(plot3D)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Simple_and_multiple_regression")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("devtools")
# Changing working directory
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Simple_and_multiple_regression")
# Reading the dataframe and storing it in an object named df
df <- readRDS("flats.rds")
# Viewing the dataframe
View(df)
reg_price_size_year <- lm(flat_price ~ floor_size + year_built data = df )
reg_price_size_year <- lm(flat_price ~ floor_size + year_built, data = df )
psummary(reg_price_size_year, std_beta = T)
summary(reg_price_size_year)
lm(flat_price ~ floor_size + year_built, data = df )
lm(flat_price ~ floor_size + year_built, data = df )
reg_price_size_year <- lm(flat_price ~ floor_size + year_built, data = df )
reg_price_size_year
summary(reg_price_size_year)
# install.packages("plot3D")
library(plot3D)
grid_size <- 30
# NA's cause problems since it affects the surface and scatter object differently
df2 <- na.omit(df)
reg_price_size_year <- df2 %>% lm(data =,
formula = flat_price ~ floor_size + year_built)
# Creating a grid representing our regression plane
seq_floor_size <- seq(min(df2$floor_size, na.rm = T),
max(df2$floor_size, na.rm = T),
length.out = grid_size)
seq_year_built <- seq(min(df2$year_built, na.rm = T),
max(df2$year_built, na.rm = T),
length.out = grid_size)
year_size <- expand.grid(floor_size = seq_floor_size,
year_built = seq_year_built)
predicted_price <- predict(reg_price_size_year,
newdata = year_size) |>
matrix(ncol = grid_size, nrow = grid_size)
fitpoints <- predict(reg_price_size_year)
scatter3D(x = df2$floor_size,
y = df2$year_built,
z = df2$flat_price,
# Regression plane
surf = list(x = seq_floor_size,
y = seq_year_built,
z = predicted_price,
# Residuals
fit = fitpoints,
# Surface lines
facets = NA,
col = "black"),
# Plot Settings
pch = 18,
ticktype = "detailed",
bty = "g",
col = "black",
# Viewpoint
theta = 20,
phi = 15)
# install.packages("plot3D")
library(plotly)
grid_size <- 30
# NA's cause problems since it affects the surface and scatter object differently
df2 <- na.omit(df)
# Regression
reg_price_size_year <- lm(flat_price ~ floor_size + year_built, data = df2)
# Creating a grid representing our regression plane
seq_floor_size <- seq(min(df2$floor_size, na.rm = T),
max(df2$floor_size, na.rm = T),
length.out = grid_size)
seq_year_built <- seq(min(df2$year_built, na.rm = T),
max(df2$year_built, na.rm = T),
length.out = grid_size)
year_size <- expand.grid(floor_size = seq_floor_size,
year_built = seq_year_built)
# For helpfiles on predict function, type help(predict.lm)
# Here we create a matrix where columns and rows represent the x and y axes,
# and the datapoints represent the heigth on the z-axis.
# We use the values in year_size to predict the height at a given point p(x,y)
predicted_price <- matrix(predict(reg_price_size_year,
newdata = year_size),
ncol = grid_size,
nrow = grid_size,
byrow = TRUE)
plot_ly(data = df2,
type = "scatter3d",
mode = "markers",
x = ~floor_size,
y = ~year_built,
z = ~flat_price,
color = ~location,
size = I(150)) %>%
add_surface(x = seq_floor_size,
y = seq_year_built,
z = predicted_price,
inherit = F,
opacity = .5)
#install.packages("margins")
library(margins)
reg_price_size_year <- lm(flat_price ~ floor_size + year_built, data = df) #this must be called this way, for the persp function to work
persp(reg_price_size_year,
xvar = "floor_size",
yvar = "year_built",
theta = -30,
phi = 15)
help("margins")
psummary(df)
# NB this can be written both shorter by using the seq function, and simpler by not adding a scatter-plot (which also is color-coded)
margins(reg_price_size_year, at = list(floor_size = seq(0, 200, 50),
year_built = seq(1920, 2010, 30)))
# Converting year_built predictions to a factor, so it can be used as a categorical variable in ggplot
margins_regression <- mutate(margins_regression, year_built = as.factor(year_built))
ggplot(margins_regression, mapping = aes(x = floor_size,
y = fitted,
colour = year_built)) +
geom_smooth(method = "lm", se = F, fullrange = TRUE)
df <- df %>%
mutate(i.energy_efficiency = case_when(energy_efficiency == "poor" ~ 1,
energy_efficiency == "mediocre" ~ 2,
energy_efficiency == "best" ~ 3))
# NB we could also use as.integer(energy_efficency), but this would cause the variable to be coded in reverse order (i.e., best = 1, and poor = 3)
as.numeric(df$energy_efficiency)
ggplot(df, mapping = aes(x = floor_size,
y = flat_price,
colour = location)) +
geom_point()
ggplot(df, mapping = aes(x = floor_size,
y = flat_price,
colour = location)) +
geom_point()
ggplot(df, mapping = aes(x = floor_size,
y = flat_price,
colour = location)) #+
ggplot(df, mapping = aes(x = floor_size,
y = flat_price,
colour = location)) +
geom_point()
ggplot(df, mapping = aes(x = floor_size,
y = flat_price,
colour = location)) +
geom_point() +
geom_smooth(method = "lm", se = F)
margins_regression
View(margins_regression)
ggplot(margins_regression, mapping = aes(x = floor_size,
y = fitted,
colour = location)) +
geom_point()
df1 <- mutate(df, energy_efficiency = as.numeric(energy_efficiency))
df1 <- mutate(df, energy_efficiency2 = as.numeric(energy_efficiency))
df1 <- mutate(df, energy_efficiency2 = as.numeric(energy_efficiency))
View(df1)
str(df$energy_efficiency)
help("subset")
df_filtered <- subset(df, energy_efficiency == "mediocre" | energy_efficiency = "best")
df_filtered <- subset(df, energy_efficiency == "mediocre" | energy_efficiency == "best")
psummary(df_filtered)
View(df_filtered)
reg <- lm(flat_prize ~ location)
reg <- lm(flat_prize ~ location, data = df)
reg <- lm(flat_price ~ location, data = df)
psummary(reg)
Y = c(4,3,2)
X0 = c(1,1,1)
X1 = c(2,3,4)
lm(Y~X1)
lm(Y~X1) |> summary()
3*X0 + (25/29)*X1
inv((t(X1)%*%X1))%*%(t(X1)%*%Y)
install.packages(matlib)
install.packages("matlib")
library(matlib)
inv((t(X1)%*%X1))%*%(t(X1)%*%Y)
t(X0)%*%Y
(t(X0)%*%Y)/t(X0)%*%X0
t(X0)%*%Y/t(X0)%*%X0
t(X0)%*%Y/t(X0)%*%X0 + t(Y)%*%X1/t(X1)%*%XI
t(X0)%*%Y/t(X0)%*%X0 + t(Y)%*%X1/t(X1)%*%X1
t(Y)%*%X1/t(X1)%*%X1
25/29
