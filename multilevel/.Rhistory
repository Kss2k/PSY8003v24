geom_smooth(method = "lm", se = F, formula = y~x)
flats3 <- mutate(flats, location = as.integer(location)) %>%
subset(location %in% 1:2)
flats3 %>% ggplot(aes(x = location,
y = flat_price)) +
#geom_point() +
stat_summary(fun = "mean",
geom = "point",
colour = "blue",
size = 4) +
geom_smooth(method = "lm", se = F, formula = y~x)
flats3 <- mutate(flats, location = as.integer(location)) %>%
subset(location %in% 1:2)
flats3 %>% ggplot(aes(x = location,
y = flat_price)) +
geom_point("blue3") +
stat_summary(fun = "mean",
geom = "point",
colour = "blue",
size = 4) +
geom_smooth(method = "lm", se = F, formula = y~x,
colour = "blue")
flats3 %>% ggplot(aes(x = location,
y = flat_price)) +
geom_point(colour = "blue3") +
stat_summary(fun = "mean",
geom = "point",
colour = "blue",
size = 4) +
geom_smooth(method = "lm", se = F, formula = y~x,
colour = "blue")
flats3 <- mutate(flats, location = as.integer(location)) %>%
subset(location %in% 1:2)
flats3 %>% ggplot(aes(x = location,
y = flat_price)) +
stat_summary(fun = "mean",
geom = "point",
colour = "blue",
size = 4) +
geom_smooth(method = "lm", se = F, formula = y~x,
colour = "blue")
flats3 <- mutate(flats, location = as.ordered(location)) %>%
subset(location %in% 1:2)
flats3 %>% ggplot(aes(x = location,
y = flat_price)) +
stat_summary(fun = "mean",
geom = "point",
colour = "blue",
size = 4) +
geom_smooth(method = "lm", se = F, formula = y~x,
colour = "blue")
flats3 <- mutate(flats, location = as.factor(location)) %>%
subset(location %in% 1:2)
flats3 %>% ggplot(aes(x = location,
y = flat_price)) +
stat_summary(fun = "mean",
geom = "point",
colour = "blue",
size = 4) +
geom_smooth(method = "lm", se = F, formula = y~x,
colour = "blue")
flats3 <- mutate(flats, location = as.numeric(location)) %>%
subset(location %in% 1:2)
flats3 %>% ggplot(aes(x = location,
y = flat_price)) +
stat_summary(fun = "mean",
geom = "point",
colour = "blue",
size = 4) +
geom_smooth(method = "lm", se = F, formula = y~x,
colour = "blue")
std.error_alpha <- summary(step_2)[["coefficients"]][2,2]
step_1 <- lm(calories ~ attract, data = workout)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Dummy_moderation_and_mediation")
workout <- readRDS("workout.rds")
View(workout)
step_1 <- lm(calories ~ attract, data = workout)
preg(step_1)
psummary(step_1)
step_2 <- lm(appear ~ attract, data = workout)
psummary(step_2)
step_3 <- lm(calories ~ appear, data = workout)
psummary(step_3)
step_4 <- lm(calories ~ attract + appear, data = workout)
psummary(step_4)
delta <- step_1$coefficients[2] - step_4$coefficients[2]
delta
alpha <- step_2$coefficients[2]
beta <- step_4$coefficients[3]
sobel <- alpha * beta
sobel
std.error_alpha <- summary(step_2)[["coefficients"]][2,2]
std.error_beta <- summary(step_4)[["coefficients"]][3,2]
sobel_z <- sqrt(alpha^2*std.error_beta^2 +
beta^2*std.error_alpha^2 +
std.error_alpha^2*std.error_beta^2)
sobel_z
CI_low = sobel - sobel_z*1.96
CI_high = sobel + sobel_z*1.96
cat("CI_low =", CI_low, "CI_high =", CI_high)
# install.packages("lavaan", dependencies = T)
# devtools::install_github("ihrke/rmedsem")
library(rmedsem)
install.packages("lavaan", dependencies = T)
devtools::install_github("ihrke/rmedsem")
# install.packages("lavaan", dependencies = T)
# devtools::install_github("ihrke/rmedsem")
library(rmedsem)
devtools::install_github("ihrke/rmedsem")
devtools::install_github("ihrke/rmedsem")
# install.packages("lavaan", dependencies = T)
# devtools::install_github("ihrke/rmedsem")
library(rmedsem)
library(lavaan)
version
install.packages(installr)
install.packages("installr")
installr::updateR()
# install.packages("lavaan", dependencies = T)
# devtools::install_github("ihrke/rmedsem")
library(rmedsem)
library(lavaan)
confint_boot1 <- confint(rand_coeff_ID, method = "boot", nsim = 1000)
library(pprint)
library(tidyverse)
library(Statamarkdown)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/multilevel")
depression <- readRDS("depression.rds")
depression.long <- depression %>%
pivot_longer(cols = starts_with("week") | starts_with("BDI"),
names_to = c(".value", "session"),
names_pattern = "(BDI|week)([0-9]+)") %>%
mutate(session = as.integer(session))
rand_coeff_ID <- lmer(BDI ~  week + (1|married) + (1|ID),
data = depression.long,
REML = TRUE)
# install.packages("lme4")
# install.packages("lmerTest")
library(lmerTest)
empty_mod <- lmer(BDI ~ (1|ID), data = depression.long, REML = TRUE # Default
)
summary(empty_mod)
# Dependendent
rand_coeff <- lmer(BDI ~ week + (1 + week|ID),
data = depression.long,
REML = TRUE # Again this is the default so it is not really necessary to specify it
)
summary(rand_coeff)
# Independent 0 = no intercept
rand_coeff <- lmer(BDI ~ week + (1|ID) + (0 + week|ID),
data = depression.long,
REML = TRUE)
summary(rand_coeff)
rand_int_effect <- lmer(BDI~ week*job + (1+week*job|ID),
data = depression.long, REML = TRUE)
summary(rand_int_effect)
rand_coeff_ID <- lmer(BDI ~  week + (1|married) + (1|ID),
data = depression.long,
REML = TRUE)
rand_coeff_ID
confint_boot1 <- confint(rand_coeff_ID, method = "boot", nsim = 1000)
confint_boot1
confint_boot1 <- confint(rand_coeff, method = "boot", nsim = 1000)
confint_boot1
confint_boot1 <- confint(rand_coeff, method = "boot", nsim = 1000)
library(pprint)
library(tidyverse)
library(Statamarkdown)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/multilevel")
depression <- readRDS("depression.rds")
depression.long <- depression %>%
pivot_longer(cols = starts_with("week") | starts_with("BDI"),
names_to = c(".value", "session"),
names_pattern = "(BDI|week)([0-9]+)") %>%
mutate(session = as.integer(session))
depression.long.BDI <- depression %>%
pivot_longer(cols = starts_with("BDI"),
names_to = "session",
values_to = "BDI",
names_prefix = "BDI",
names_transform = as.integer) %>%
select(!starts_with("week")) # This excludes week from the dataset
depression.long.week <- depression %>%
pivot_longer(cols = starts_with("week"),
names_to = "session",
values_to = "week",
names_prefix = "week",
names_transform = as.integer) %>%
select(!starts_with("BDI")) # This excludes BDI from the dataset
depression.long2 <- inner_join(depression.long.week,
depression.long.BDI)
all.equal(depression.long2, depression.long, ignore_col_order = TRUE)
depression.wide <- pivot_wider(depression.long,
names_from = session,
values_from = c(week, BDI))
psummary(depression.wide)
sample_ids <- sample(unique(depression.long$ID), 10)
depression.long %>%
filter(ID %in% sample_ids) %>%
ggplot(aes(x = week,
y = BDI)) +
geom_point() +
geom_smooth(method = "lm", se = F)
sample_ids <- sample(unique(depression.long$ID), 5)
depression.long %>%
filter(ID %in% sample_ids) %>%
ggplot(aes(x = week,
y = BDI,
colour = ID)) +
geom_point() +
geom_path()
sample_ids <- sample(unique(depression.long$ID), 5)
depression.long %>%
filter(ID %in% sample_ids) %>%
ggplot(aes(x = week,
y = BDI,
colour = ID)) +
geom_point() +
geom_smooth(method = "lm", se = F)
# install.packages("lme4")
# install.packages("lmerTest")
library(lmerTest)
empty_mod <- lmer(BDI ~ (1|ID), data = depression.long, REML = TRUE # Default
)
summary(empty_mod)
random_int <- lmer(BDI ~ week + (1|ID), data = depression.long, REML = TRUE)
summary(random_int)
library(margins)
ID_sample <- depression.long$ID |> unique() |> sample(5) |> as.character()
ID_sample
predictions <- margins(random_int, at = list(week = c(0,33),
ID = ID_sample
)
)
predictions %>%
ggplot(aes(x = week,
y = fitted,
colour = ID)) +
geom_smooth(method = "lm", se = FALSE) +
# adding estimated regline using maximum likelyhood
geom_abline(intercept = random_int@beta[1],
slope = random_int@beta[2], linewidth = 1.5,
color = "darkblue") +
geom_smooth(data = depression.long, aes(x = week,
y = BDI,
colour = "red"),method = "lm", se = F, inherit.aes = F)
# Dependendent
rand_coeff <- lmer(BDI ~ week + (1 + week|ID),
data = depression.long,
REML = TRUE # Again this is the default so it is not really necessary to specify it
)
summary(rand_coeff)
# Independent 0 = no intercept
rand_coeff <- lmer(BDI ~ week + (1|ID) + (0 + week|ID),
data = depression.long,
REML = TRUE)
summary(rand_coeff)
ID_sample <- depression.long$ID |> unique() |> sample(5)
pred <- rand_coeff@frame %>%
mutate(fitted = predict(rand_coeff)
)
pred %>%
filter(ID %in% ID_sample) %>%
ggplot(aes(x = week,
y = fitted,
linetype = ID,
colour = ID)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_abline(intercept = rand_coeff@beta[1],
slope = rand_coeff@beta[2],
linewidth = 1.4) +
geom_point(mapping = aes(x = week,
y = BDI))
int_job_week <- lmer(BDI ~ week*job+ (1 |ID),
data = depression.long, REML = TRUE)
summary(int_job_week)
fitted_vals <- predict(int_job_week)
fitted_df <- int_job_week@frame %>%
mutate(fitted = fitted_vals,
job = as.factor(job))
fitted_df %>% ggplot(aes(x = week,
y = fitted,
colour = job)) +
geom_count(aes(x = week,
y = BDI,
colour = job,
opacity = .2),
inherit.aes = F ) +
geom_smooth(method = "lm", se = F, fullrange = T)
ID_sample <- depression.long$ID |> unique() |> sample(6)
depression.long %>%
filter(ID %in% ID_sample) %>%
ggplot(aes(x = week,
y = job,
colour = ID)) +
geom_point() +
geom_path()
rand_int_effect <- lmer(BDI~ week*job + (1+week*job|ID),
data = depression.long, REML = TRUE)
summary(rand_int_effect)
rand_coeff_ID <- lmer(BDI ~  week + (1|married) + (1|ID),
data = depression.long,
REML = TRUE)
rand_coeff_ID
#install.packages("performance")
library(performance)
icc(rand_coeff)
icc(rand_coeff_ID, by_group = TRUE)
summary(rand_coeff_ID, ddf = "Satterthwaite")
summary(rand_coeff_ID, ddf = "Kenward-Roger")
confint_boot1 <- confint(rand_coeff, method = "boot", nsim = 1000)
confint_boot1
summary(rand_coeff)
rand_coeff <- lmer(BDI ~ week + (1 + week|ID),
data = depression.long,
REML = TRUE # Again this is the default so it is not really necessary to specify it
)
confint_boot1 <- confint(rand_coeff, method = "boot", nsim = 1000)
confint_boot1
summary(rand_coeff)
rand_coeff <- lmer(BDI ~ week + (1|ID) + (0 + week|ID),
data = depression.long,
REML = TRUE)
confint_boot1 <- confint(rand_coeff, method = "boot", nsim = 100)
confint_boot1
summary(rand_coeff)
help("pivot_longer")
help("gather")
reg1 <- lm(flat_price ~ location, data = flats)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Dummy_moderation_and_mediation")
flats <- readRDS("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Dummy_moderation_and_mediation/flats.rds")
reg1 <- lm(flat_price ~ location, data = flats)
pprint::psummary(reg1)
help("relevel")
relevel(flats$location, "south")
flats$location <- relevel(flats$location, "south")
pprint::psummary(reg1)
flats$location <- relevel(flats$location, ref = "south")
reg1 <- lm(flat_price ~ location, data = flats)
pprint::psummary(reg1)
protective1 <- 1:100
protective2 <- 101:200
df <- (protective1 = protective1,
View(rand_coeff)
rand_coeff <- lmer(BDI ~ week + (1 + week|ID),
data = depression.long,
REML = TRUE # Again this is the default so it is not really necessary to specify it
)
summary(rand_coeff)
View(rand_coeff)
rand_coeff@u |> sd()
rand_coeff@u |> scale() |> confint()
rand_coeff@u |> scale()
rand_coeff@u |> scale() -> a
help("confint")
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/multilevel")
depression <- readRDS("depression.rds")
View(depression)
depression.long.BDI <- pivot_longer(depression,
cols = starts_with("BDI"),
names_to = "session",
values_to = "BDI"
)
View(depression.long)
View(depression.long.BDI)
depression.long.BDI <- pivot_longer(depression,
cols = starts_with("BDI"),
names_to = "session",
values_to = "BDI",
names_prefix = "BDI"
)
psummary(depression.long.BDI)
depression.long.BDI <- pivot_longer(depression,
cols = starts_with("BDI"),
names_to = "session",
values_to = "BDI",
names_prefix = "BDI",
names_transform = as.integer
)
psummary(depression.long.BDI)
depression.long.BDI <- select(starts_with("week"))
depression.long.BDI <- select(starts_with("week"))
depression.long.BDI <- select(!starts_with("week"))
depression.long.BDI <- dplyr::select(!starts_with("week"))
depression.long.BDI <- pivot_longer(depression,
cols = starts_with("BDI"),
names_to = "session",
values_to = "BDI",
names_prefix = "BDI",
names_transform = as.integer
) %>% select(starts_with("week"))
depression.long.BDI <- pivot_longer(depression,
cols = starts_with("BDI"),
names_to = "session",
values_to = "BDI",
names_prefix = "BDI",
names_transform = as.integer
) %>% select(!starts_with("week"))
depression.long.week <- depression %>%
pivot_longer(cols = starts_with("week"),
names_to = "session",
values_to = "week",
names_prefix = "week",
names_transform = as.integer) %>%
select(!starts_with("BDI"))
View(depression.long.week)
depression.long2 <- inner_join(depression.long.week,
depression.long.BDI)
all.equal(depression.long2, depression.long, ignore_col_order = TRUE)
all.equal(depression.long2, depression.long, ignore_col_order = TRUE)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/multilevel")
depression <- readRDS("depression.rds")
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/multilevel")
depression <- readRDS("depression.rds")
diet <- readRDS("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/multilevel/diet.rds")
psummary(diet)
diet.long <- pivot_longer(diet,
cols = c("pre_weight", "post_weight"),
names_to = "time",
values_to = "weight"
)
View(diet.long)
diet.wide <- pivot_wider(diet,
values_from = "weight",
names_from = "time")
diet.wide <- pivot_wider(diet.long,
values_from = "weight",
names_from = "time")
nrow(diet.long)
View(diet)
mean(diet$age)
round(mean(diet$age), 3)
round(mean(diet$age), 4)
round(round(mean(diet$age), digits = 4), digits = 3)
diet$age
diet$age %>% mean()
diet$age%>% mean() %>% round(4)
diet$age%>% mean() %>% round(4) %>% round(3)
mean() <| diet$age
mean() %<% diet$age
sample_ids <- sample(unique(depression.long$ID), 5)
depression.long %>%
filter(ID %in% sample_ids) %>%
ggplot(aes(x = week,
y = BDI,
colour = ID)) +
geom_point() +
geom_path()
sample_ids <- sample(unique(depression.long$ID), 5)
depression.long %>%
filter(ID %in% sample_ids) %>%
ggplot(aes(x = week,
y = BDI,
colour = ID)) +
geom_point() +
geom_smooth(method = "lm", se = F)
help("lmer")
library(lmerTest)
empty_mod <- lmer(BDI ~ (1|ID), data = depression.long, REML = TRUE)
summary(empty_mod)
random_int <- lmer(BDI ~ week + (1|ID), data = depression.long, REML = TRUE)
summary(random_int)
library(margins)
ID_sample <- depression.long$ID |> unique() |> sample(5) |> as.character()
ID_sample
predictions <- margins(random_int, at = list(week = c(0,33),
ID = ID_sample
)
)
predictions %>%
ggplot(aes(x = week,
y = fitted,
colour = ID)) +
geom_smooth(method = "lm", se = FALSE) +
# adding estimated regline using maximum likelyhood
geom_abline(intercept = random_int@beta[1],
slope = random_int@beta[2], linewidth = 1.5,
color = "darkblue") +
geom_smooth(data = depression.long, aes(x = week,
y = BDI,
colour = "red"),method = "lm", se = F, inherit.aes = F)
B
rand_coeff <- lmer(BDI ~ week + (1 + week|ID),
data = depression.long,
REML = TRUE # Again this is the default so it is not really necessary to specify it
)
summary(rand_coeff)
ID_sample <- depression.long$ID |> unique() |> sample(5)
pred <- rand_coeff@frame %>%
mutate(fitted = predict(rand_coeff)
)
pred %>%
filter(ID %in% ID_sample) %>%
ggplot(aes(x = week,
y = fitted,
linetype = ID,
colour = ID)) +
geom_smooth(method = "lm", formula = y ~ x, se = F) +
geom_abline(intercept = rand_coeff@beta[1],
slope = rand_coeff@beta[2],
linewidth = 1.4) +
geom_point(mapping = aes(x = week,
y = BDI))
rand_coeff_ID <- lmer(BDI ~  week + (1|married) + (1|ID),
data = depression.long,
REML = TRUE)
rand_coeff_ID
rand_coeff_ID <- lmer(BDI ~  week + (1|ID) + (1|married),
data = depression.long,
REML = TRUE)
rand_coeff_ID
library(ggplot2)
