library(ggplot2)
flats %>% ggplot(mapping = aes(x = location,
y = flat_price,
colour = location)) +
geom_boxplot() +
geom_jitter(size = 0.1) +
stat_summary(fun = "mean",
geom = "point",
colour = "green") +
stat_summary(fun.data = "mean_cl_boot",
geom = "errorbar",
colour = "darkblue",
width = 0.2)
# Renaming energy-efficiency to make the output a bit more readable
flats2 <- flats %>% rename(e_effic = energy_efficiency)
reg_price_location_energy <- lm(flat_price ~ location + e_effic,
data = flats2)
preg(reg_price_location_energy)
reg_price_location_floor_size <- lm(flat_price ~ location + floor_size,
data = flats)
preg(reg_price_location_floor_size)
library(margins)
pred_price_location_size <- margins(reg_price_location_floor_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_price_location_size %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location)) +
geom_smooth(method = "lm", se = F)
reg_price_size_int_year <- lm(flat_price ~ floor_size * year_built, data = flats)
preg(reg_price_size_int_year)
persp(reg_price_size_int_year,
xvar = "floor_size",
yvar = "year_built",
theta = -30,
phi = 15)
library(plotly)
# Removing NA's
flats_NA_removed <- na.omit(flats)
# Creating a grid representing our regression plane
grid_size <- 30
seq_floor_size <- seq(min(flats_NA_removed$floor_size, na.rm = T),
max(flats_NA_removed$floor_size, na.rm = T),
length.out = grid_size)
seq_year_built <- seq(min(flats_NA_removed$year_built, na.rm = T),
max(flats_NA_removed$year_built, na.rm = T),
length.out = grid_size)
year_size <- expand.grid(floor_size = seq_floor_size,
year_built = seq_year_built)
predicted_price <- matrix(predict(reg_price_size_int_year,
newdata = year_size),
ncol = grid_size,
nrow = grid_size,
byrow = TRUE)
plot_ly(data = flats_NA_removed,
type = "scatter3d",
x = ~floor_size,
y = ~year_built,
z = ~flat_price,
color = ~location,
size = I(150)) %>%
add_surface(x = seq_floor_size,
y = seq_year_built,
z = predicted_price,
opacity = .3)
library(margins)
pred_price_size_int_year <- margins(reg_price_size_int_year,
at = list(floor_size = c(20, 220),
year_built = seq(1930, 2010, 20)
)
)
pred_price_size_int_year <- pred_price_size_int_year %>%
mutate(year_built = factor(year_built,
levels = seq(1930, 2010, 20),
labels = as.character(
seq(1930, 2010, 20)
)
)
)
pred_price_size_int_year %>%
ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = year_built)) +
geom_smooth(method = "lm", se = F)
reg_price_location_int_size <- lm(flat_price ~ location*floor_size)
reg_price_location_int_size <- lm(flat_price ~ location*floor_size, data = flats)
preg(reg_price_location_int_size)
reg_price_location_int_size <- lm(flat_price ~ location*floor_size, data = flats)
preg(reg_price_location_int_size)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
+
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
View(pred_location_int_floor)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = predicted),
colour = location) +
geom_smooth(method = "lm", se = F)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted),
colour = location) +
geom_smooth(method = "lm", se = F)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location)
) +
geom_smooth(method = "lm", se = F)
flats %>% ggplot(mapping = aes(x = floor_size,
y = flat_price,
colour = location)) +
geom_smooth(method = "lm", se = FALSE)
str(flats$location)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Dummy_moderation_and_mediation")
flats <- readRDS("flats.rds")
flats2$location <- relevel(flats$location, ref = "south")
reg_price_location <- lm(flat_price ~ location, data = flats)
preg(reg_price_location)
library(ggplot2)
flats %>% ggplot(mapping = aes(x = location,
y = flat_price,
colour = location)) +
geom_boxplot() +
geom_jitter(size = 0.1) +
stat_summary(fun = "mean",
geom = "point",
colour = "green") +
stat_summary(fun.data = "mean_cl_boot",
geom = "errorbar",
colour = "darkblue",
width = 0.2)
library(margins)
pred_price_size_int_year <- margins(reg_price_size_int_year,
at = list(floor_size = c(20, 220),
year_built = seq(1930, 2010, 20)
)
)
pred_price_size_int_year <- pred_price_size_int_year %>%
mutate(year_built = factor(year_built,
levels = seq(1930, 2010, 20),
labels = as.character(
seq(1930, 2010, 20)
)
)
)
pred_price_size_int_year %>%
ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = year_built)) +
geom_smooth(method = "lm", se = F)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location)
) +
geom_smooth(method = "lm", se = F)
flats %>% ggplot(mapping = aes(x = floor_size,
y = flat_price,
colour = location)) +
geom_smooth(method = "lm", se = FALSE)
flats %>% ggplot(mapping = aes(x = floor_size,
y = flat_price,
colour = location)) +
geom_smooth(method = "lm", se = FALSE, fullrange = T)
161757 - 288110
5347 + 2591
5347 - 1750
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location,
xlim(0,220))
) +
geom_smooth(method = "lm", se = F)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location,
xlim(-10,220))
) +
geom_smooth(method = "lm", se = F)
help(aes)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location,
)
) +
geom_smooth(method = "lm", se = F) +
xlim(-10,220)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location,
)
) +
geom_smooth(method = "lm", se = F) +
xlim(-10,220)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location,
)
) +
geom_smooth(method = "lm", se = F) +
xlim(-10,220)
ylim(-100000, 2000000)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location,
)
) +
geom_smooth(method = "lm", se = F) +
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(20,220)
)
)
pred_location_int_floor %>% ggplot(mapping = aes(x = floor_size,
y = fitted,
colour = location,
)
) +
geom_smooth(method = "lm", se = F)
pred_location_int_floor <- margins(reg_price_location_int_size,
at = list(location = c("centre",
"south",
"west",
"east"),
floor_size = c(0,220)
)
)
psummary(pred_location_int_floor)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Dummy_moderation_and_mediation")
flats <- readRDS("flats.rds")
# NB the variable is already coded as a factor, so this is only to show how its done
# SO DO NOT RUN/OVERWRITE ORIGINAL DATASET
flats2 <- flats %>% mutate(location = factor(location,
levels = c(1, 2, 3, 4),
labels = c("centre",
"south",
"west",
"east")))
step_1 <- lm(calories ~ attract, data = df)
workout <- readRDS("workout.rds")
step_1 <- lm(calories ~ attract, data = df)
step_1 <- lm(calories ~ attract, data = workout)
preg(step_1)
step_2 <- lm(appear ~ attract, data = df)
step_2 <- lm(appear ~ attract, data = workout)
preg(step_2, std_beta = T)
step_2 <- lm(appear ~ attract, data = workout)
preg(step_2)
step_3 <- lm(calories ~ appear, data = df)
step_3 <- lm(calories ~ appear, data = workout)
preg(step_3)
step_4 <- lm(calories ~ attract + appear, data = workout)
preg(step_4)
delta <- step_1$coefficients[2] - step_4$coefficients[2]
delta
alpha <- step_2$coefficients[2]
beta <- step_4$coefficients[3]
sobel <- alpha * beta
sobel
std.error_alpha <- summary(step_2)[["coefficients"]][2,2]
std.error_beta <- summary(step_4)[["coefficients"]][3,2]
sobel_z <- sqrt(alpha^2*std.error_beta^2 +
beta^2*std.error_alpha^2 +
std.error_alpha^2*std.error_beta^2)
sobel_z
CI_low = sobel - sobel_z*1.96
CI_high = sobel + sobel_z*1.96
cat("CI_low =", CI_low, "CI_high =", CI_high)
med_1 <- rmedsem(sem_1,
indep = "attract",
med = "appear",
dep = "calories",
approach = c("bk", "zlc"))
# install.packages("lavaan", dependencies = T)
# devtools::install_github("ihrke/rmedsem")
library(rmedsem)
library(lavaan)
model <- "
appear ~ attract
calories ~ attract + appear
"
sem_1 <- sem(model, data = df)
model <- "
appear ~ attract
calories ~ attract + appear
"
sem_1 <- sem(model, data = workout)
summary(sem_1)
med_1 <- rmedsem(sem_1,
indep = "attract",
med = "appear",
dep = "calories",
approach = c("bk", "zlc"))
med_1
#install.packages("tidySEM")
library(tidySEM)
graph_sem(medsem_1)
#install.packages("tidySEM")
library(tidySEM)
graph_sem(sem_1)
semPlot::semPlotModel(sem_1)
library(pprint)
library(haven)
library(Statamarkdown)
library(dplyr)
setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Dummy_moderation_and_mediation")
flats <- readRDS("flats.rds")
version
version
View(workout)
# setwd("C:/Users/slupp/OneDrive/Skrivebord/NTNU/Mehmet/PSY8003/Dummy_moderation_and_mediation")
workout <- readRDS("workout.rds")
View(workout)
help(sem)
# install.packages("lavaan", dependencies = T)
# devtools::install_github("ihrke/rmedsem")
# install.packages("devtools")
library(rmedsem)
library(lavaan)
help(sem)
sem_1 <- sem(model = model, data = workout)
model <- "
appear ~ attractive
calories ~ attract + appear
"
sem_1 <- sem(model = model, data = workout)
sem_1 <- sem(model = model, data = workout)
appear ~ attract
sem_1 <- sem(model = model, data = workout)
model <- "
appear ~ attract
calories ~ attract + appear
"
model <- "
appear ~ attract
calories ~ attract + appear
"
sem_1 <- sem(model = model, data = workout)
summary(sem_1)
help(rmedsem)
med_1 <- rmedsem(sem_1,
indep = "attract",
med = "appear",
dep = "calories",
approach = c("bk", "zlc"))
med_1
med_1 <- rmedsem(sem_1,
indep = "attract",
med = "appear",
dep = "calories",
approach = "bk")
med_1
med_1
summary(med_1)
#install.packages("tidySEM")
library(tidySEM)
graph_sem(msem_1)
#install.packages("tidySEM")
library(tidySEM)
graph_sem(sem_1)
model <- "
appear ~ attract
calories ~ attract + appear + body
"
sem_1 <- sem(model = model, data = workout)
summary(sem_1)
#install.packages("tidySEM")
library(tidySEM)
graph_sem(sem_1)
med_1 <- rmedsem(sem_1,
indep = "attract",
med = "appear",
dep = "calories",
approach = "bk")
med_1
library(tidySEM)
graph_sem(sem_1)
model <- "
appear ~ attract + body
calories ~ attract + appear + body
"
sem_1 <- sem(model = model, data = workout)
summary(sem_1)
#install.packages("tidySEM")
library(tidySEM)
graph_sem(sem_1)
med_1 <- rmedsem(sem_1,
indep = "attract",
med = "appear",
dep = "calories",
approach = "bk")
med_1
med_2 <- rmedsem(sem_1,
indep = "body",
med "appear",
model <- "
appear ~ attract + body
calories ~ attract + appear + body
"
sem_1 <- sem(model = model, data = workout)
summary(sem_1)
med_1 <- rmedsem(sem_1,
indep = "body",
med = "appear",
dep = "calories",
approach = "bk")
med_1
med_2 <- rmedsem(sem_1,
indep = "body",
med = "appear",
dep = "calories",
approach = "bk")
med_2
